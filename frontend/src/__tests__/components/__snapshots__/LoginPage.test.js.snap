// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<LoginPage/> renders <LoginPage /> component 1`] = `
<ForwardRef(Bootstrap(Container))>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <title>
      Frontview: Please, login
    </title>
  </HelmetWrapper>
  <ForwardRef(Bootstrap(Row))>
    <ForwardRef(Bootstrap(Col))
      md={
        Object {
          "offset": 2,
          "span": 8,
        }
      }
      xl={
        Object {
          "offset": 3,
          "span": 6,
        }
      }
    >
      <Switch>
        <PropsRoute
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "destroyOnUnmount": true,
                "enableReinitialize": false,
                "forceUnregisterOnUnmount": false,
                "form": "Login",
                "getFormState": [Function],
                "keepDirtyOnReinitialize": false,
                "persistentSubmitErrors": false,
                "pure": true,
                "shouldAsyncValidate": [Function],
                "shouldError": [Function],
                "shouldValidate": [Function],
                "shouldWarn": [Function],
                "touchOnBlur": true,
                "touchOnChange": false,
                "updateUnregisteredFields": false,
                "validate": [Function],
              },
              "displayName": "ReduxForm",
              "render": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          exact={true}
          getUser={[MockFunction]}
          login={[MockFunction]}
          path="/login"
        />
        <PropsRoute
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "destroyOnUnmount": true,
                "enableReinitialize": false,
                "forceUnregisterOnUnmount": false,
                "form": "Forgot",
                "getFormState": [Function],
                "keepDirtyOnReinitialize": false,
                "persistentSubmitErrors": false,
                "pure": true,
                "shouldAsyncValidate": [Function],
                "shouldError": [Function],
                "shouldValidate": [Function],
                "shouldWarn": [Function],
                "touchOnBlur": true,
                "touchOnChange": false,
                "updateUnregisteredFields": false,
                "validate": [Function],
              },
              "displayName": "ReduxForm",
              "render": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          exact={true}
          forgot={[MockFunction]}
          path="/login/forgot"
        />
        <PropsRoute
          addFlashMessage={[MockFunction]}
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "destroyOnUnmount": true,
                "enableReinitialize": false,
                "forceUnregisterOnUnmount": false,
                "form": "Reset",
                "getFormState": [Function],
                "keepDirtyOnReinitialize": false,
                "persistentSubmitErrors": false,
                "pure": true,
                "shouldAsyncValidate": [Function],
                "shouldError": [Function],
                "shouldValidate": [Function],
                "shouldWarn": [Function],
                "touchOnBlur": true,
                "touchOnChange": false,
                "updateUnregisteredFields": false,
                "validate": [Function],
              },
              "displayName": "ReduxForm",
              "render": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          getReset={[MockFunction]}
          path="/login/reset/:token"
          resetToken={[MockFunction]}
        />
        <Redirect
          push={false}
          to="/login"
        />
      </Switch>
    </ForwardRef(Bootstrap(Col))>
  </ForwardRef(Bootstrap(Row))>
</ForwardRef(Bootstrap(Container))>
`;
